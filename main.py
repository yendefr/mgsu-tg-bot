import psycopg2
from telebot import TeleBot, types

from config import BOT_TOKEN
from config import DB_USER, DB_DATABASE, DB_PASSWORD, DB_HOST


bot = TeleBot(BOT_TOKEN)
conn = psycopg2.connect(user=DB_USER,
                        database=DB_DATABASE,
                        password=DB_PASSWORD,
                        host=DB_HOST,
                        port="5432")
cursor = conn.cursor()


@bot.message_handler(content_types=['document'])
def get_document_info(message):
    print(message.document.file_id)


@bot.message_handler(commands=['timetable', 'files', 'tasks'])
def get_commands(message):
    if message.text == '/timetable':
        send_timetable(message)
    elif message.text == '/files':
        send_files_menu(message)
    elif message.text == '/tasks':
        send_files_menu(message)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –æ—Ç –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã. –¢–∞–∫–∂–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å—è–∫–∏—Ö –≤–∞–∂–Ω–æ—Å—Ç–µ–π!")
    bot.send_message(message.from_user.id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —Ç–≤–æ—ë –∏–º–µ—á–∫–æ?")
    bot.register_next_step_handler(message, get_name)


@bot.message_handler(content_types=['text'])
def get_request(message):
    if message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        send_timetable(message)
    elif message.text == '–§–∞–π–ª—ã':
        send_files_menu(message)
    elif message.text == '–î–æ–º–∞—à–∫–∞':
        send_tasks(message)


def get_name(message):
    name = message.text
    cursor.execute('INSERT INTO students(id, name) VALUES (%s, %s);', (message.from_user.id, name))
    conn.commit()

    bot.send_message(message.from_user.id, '–ê —Ñ–∞–º–∏–ª–∏—è?')
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    surname = message.text
    cursor.execute('UPDATE students SET surname = %s WHERE id = %s;', (surname, message.from_user.id))
    conn.commit()

    buttons = set_buttons((
        ['1', '2'],
    ))

    bot.send_message(message.from_user.id, text='–ì—Ä—É–ø–ø–∞?', reply_markup=buttons)
    bot.register_next_step_handler(message, get_group_number)


def get_group_number(message):
    group_number = message.text
    cursor.execute('UPDATE students SET group_number = %s WHERE id = %s;', (group_number, message.from_user.id))
    conn.commit()

    cursor.execute('SELECT name, surname, group_number FROM students WHERE id = %s;', (message.from_user.id, ))
    user = cursor.fetchone()

    buttons = set_buttons((
        ['–î–∞', '–ù–µ—Ç'],
    ))

    bot.send_message(message.from_user.id, f'–¢—ã {user[0]} {user[1]} –∏–∑ {user[2]} –≥—Ä—É–ø–ø—ã, –≤–µ—Ä–Ω–æ?', reply_markup=buttons)
    bot.register_next_step_handler(message, checker)


def send_timetable(message):
    timetable = [
            types.InputMediaPhoto(open('./timetable/tuesday.png', 'rb'), caption='–í–æ—Ç —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!'),
            types.InputMediaPhoto(open('./timetable/wednesday.png', 'rb')),
            types.InputMediaPhoto(open('./timetable/thursday.png', 'rb')),
            types.InputMediaPhoto(open('./timetable/friday.png', 'rb')),
        ]

    bot.send_media_group(message.from_user.id, timetable)


@bot.message_handler(content_types=['text'])
def get_tasks(message):
    pass


@bot.message_handler(content_types=['text'])
def send_tasks(message):
    pass


def send_files_menu(message):
    if message.text == '–§–∞–π–ª—ã' or message.text == '/files' or message.text == '–ù–∞–∑–∞–¥':
        buttons = set_buttons((
            ['–£—á–µ–±–Ω–∏–∫–∏', '–¢–µ—Ç—Ä–∞–¥–∏'],
            ['–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', '–ó–∞–¥–∞—á–Ω–∏–∫–∏'],
            ['–ì–î–ó'],
            ['–í –º–µ–Ω—é'],
        ))

        bot.send_message(message.from_user.id, '–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑?', reply_markup=buttons)
        bot.register_next_step_handler(message, send_files_menu)
    elif message.text == '–í –º–µ–Ω—é':
        set_menu(message)
    else:
        buttons = set_buttons((
            ['–í—ã—à–º–∞—Ç', '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞', '–§–∏–∑–∏–∫–∞'],
            ['üß™–•–∏–º–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', 'ü™¥–≠–∫–æ–ª–æ–≥–∏—è'],
            ['üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'],
            ['–ù–∞–∑–∞–¥', '–í –º–µ–Ω—é'],
        ))

        bot.send_message(message.from_user.id, '–ö–∞–∫–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω—ã?', reply_markup=buttons)
        bot.register_next_step_handler(message, send_files, message.text)


def send_files(message, category):
    if message.text == '–§–∞–π–ª—ã' or message.text == '/files' or message.text == '–ù–∞–∑–∞–¥' or message.text == '–í –º–µ–Ω—é':
        send_files_menu(message)
    else:
        subject = message.text

        cursor.execute('SELECT id, name FROM files WHERE category = %s and subject = %s', (category, subject))
        files = cursor.fetchall()

        if not files:
            bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç!')
        else:
            for file_id, name in files:
                bot.send_document(message.from_user.id, data=file_id, caption=name)

        bot.register_next_step_handler(message, send_files, category)


def checker(message):
    if message.text == '–î–∞':
        bot.send_message(message.from_user.id, text='–ö—Ä—É—Ç–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ—Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏!')
        set_menu(message)
    elif message.text == '–ù–µ—Ç':
        cursor.execute(f'DELETE FROM students WHERE id = {message.from_user.id};')
        conn.commit()
        
        remove_buttons = types.ReplyKeyboardRemove()

        bot.send_message(message.from_user.id, text='–û–∫–µ–π, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, —Å–ª–æ—É–ø–æ–∫?', reply_markup=remove_buttons)
        bot.register_next_step_handler(message, get_name)


def set_menu(message):
    buttons = set_buttons((['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–§–∞–π–ª—ã'], ['–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–∫—É', '–ó–∞–ø–∏—Å–∞—Ç—å –¥–æ–º–∞—à–∫—É']))
    bot.send_message(message.from_user.id, text='–í–æ—Ç –º–µ–Ω—é, –≤—ã–±–∏—Ä–∞–π —á—Ç–æ —Ç–µ–±–µ —É–≥–æ–¥–Ω–æ!', reply_markup=buttons)


def set_buttons(buttons_lists: tuple):
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for buttons_list in buttons_lists:
        buttons.add(*list(map(types.KeyboardButton, buttons_list)))
    return buttons


bot.polling(none_stop=True, interval=0)
